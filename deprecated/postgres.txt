https://hub.docker.com/_/postgres
https://www.postgresqltutorial.com/psql-commands/
http://www.postgresonline.com/downloads/special_feature/postgresql83_psql_cheatsheet.pdf

`sudo service postgresql stop` stops local postgres on 5432

Image is postgres
Container name is db-postgres
--------------------------------------------

docker run -it --rm \
    --name db-postgres \
    -e POSTGRES_PASSWORD=admin \
    -e POSTGRES_USER=admin \
    -p 5432:5432 \
    postgres

docker exec -it db-postgres psql -U admin
^ or could do 8080:5432 and it wouldn't conflict?


`\l list databases`
`\c postgres` to choose db named 'postgres'

CREATE TABLE events(
   pk SERIAL PRIMARY KEY,
   type varchar(40) NOT NULL,
   name varchar(40) NOT NULL,
   data bytea,
   headers jsonb
);

ALTER TABLE events
    ADD COLUMN data BYTEA;
ALTER TABLE events
    ADD COLUMN headers JSONB;

INSERT INTO "events" (type, name)
    VALUES ('type1', 'name1');

`\dt list data tables`

select headers from events where pk=2;

-----------------------------------

limits on chars (varchar). ~10,400,000 is rough limit. TEXT type available too. JSONB
ADD COLUMN data varchar(20000); <-- limited on chars. ~10,400,000 is rough limit. TEXT type available too. JSONB

create user admin with login password 'admin';

database is called 'postgres'

-p 5432 and made sure postgresql not running locally (without docker) by `sudo lsof -i -P -n`

sqlalchemy uses LargeBinary for bytea  
psygopg2  

# rows = []
# for row in results:
#     rows.append(dict(row))
# return json.dumps(rows)





------------------------

04/11/2020 deprecated these postgres instructions:

1.
sudo lsof -i -P -n  
sudo service postgresql stop  
```
docker run -it --rm \
    --name db-postgres \
    -e POSTGRES_PASSWORD=admin \
    -e POSTGRES_USER=admin \
    -p 5432:5432 \
    postgres
```

2.
`docker exec -it db-postgres psql -U admin`  
\c postgres  
3.
```
CREATE TABLE events(
   pk SERIAL PRIMARY KEY,
   type varchar(40) NOT NULL,
   name varchar(40) NOT NULL,
   data bytea,
   headers jsonb
);
```

create user admin with login password 'admin';


---------------------------------------------

04/11/2020 previous instructions:

Sentry sdk sends events to a Flask API (like a proxy or interceptor) which then sends them to Sentry On-premise
1. `docker-compose up` your getsentry/onpremise, it defaults to localhost:9000
2. `docker run...` the database
3. `make` runs Flask server
4. `python event.py`
5. Postman for hitting the STEP2 endpoints in Flask, which send the events to Sentry.
6. `localhost:9000` to see your Sentry onprem event, if you used forwarding.


you may have to `sudo service postgresql stop` to free up 5432 on your machine

MemoryView  
https://www.postgresql.org/message-id/25EDB20679154BDBB3CBBD335184E1D7%40frank  
https://www.postgresql.org/message-id/C2C12FD0FCE64CE8BB77765A526D3C73%40frank  

"Q. How to save a instance of a Class to the DB?"
"A. You can't store the object itself in the DB. What you do is to store the data from the object and reconstruct it later."
https://stackoverflow.com/questions/2047814/is-it-possible-to-store-python-class-objects-in-sqlite