		// tried _uuid.String()
		// tried uuid.String()
		// tt := uuid.String(_uuid)

		// uuidString := _uuid.String()
		// _uuid = strings.ReplaceAll(uuidString, "-", "") 
		
		// stringy := uuid.UUID.String(_uuid)
		// _uuid = strings.ReplaceAll(stringy, "-", "") 





        		// string1 := dat["event_id"]
		// dat["event_id"] = strings.ReplaceAll(string1, "-", "") 




		// newbody, err := jsonparser.Set(body, []byte("1111aaaaaaaaabbbbbbbbb2222222"), "event_id")
		// var newdat map[string]interface{}
		// if err := json.Unmarshal(newbody, &newdat); err != nil {
		// 	panic(err)
		// }
		// is the json
		// fmt.Println(newdat)




        		// dat["event_id"] = "1111aaaabbbbcccddd2222"
		
		// var _uuid, err1 = uuid.NewRandom()
		// if err1 != nil {
		// 	fmt.Println(err1)
		// }

--------------------------------------------------------------------------------------------------------


// sentry-go Transport layer https://github.com/getsentry/sentry-go/blob/db5e5daf4334b2c9b5341cfcb3bbd1535b923c18/transport.go
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages

--------------------------------------------------------------------------------------------------------

*[]byte does not implement io.Reader (missing Read method)
resp, err := http.Post(SENTRY, "image/jpeg", &postBodyEncoded)

HTTP EXAMPLE - works...
resp, err := http.Get("http://example.com/")
if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	responseBodyBytes, err := ioutil.ReadAll(resp.Body)
	fmt.Println(string(responseBodyBytes))


https://golang.org/pkg/net/http/#Client
https://medium.com/@masnun/making-http-requests-in-golang-dd123379efe7
resp, errPost := http.Post(SENTRY_URL, "image/jpeg", buffy)

type Event struct {
	id         int
	name   string
	// type    string
	payload []byte
	headers []byte
}

event_id, err := jsonparser.GetString(body, "event_id")
if err != nil {
	fmt.Println(err)
}
fmt.Println("id", strconv.Itoa(id), event_id)

request.Header.Set("Host", headerInterface["Host"].(string))
request.Header.Set("Accept-Encoding", headerInterface["Accept-Encoding"].(string))
request.Header.Set("Content-Length", headerInterface["Content-Length"].(string))
request.Header.Set("Content-Encoding", headerInterface["Content-Encoding"].(string))
request.Header.Set("Content-Type", headerInterface["Content-Type"].(string))
request.Header.Set("User-Agent", headerInterface["User-Agent"].(string))



event-to-sentry.go
	d, exists := os.LookupEnv("DSN_PYTHON")
	if !exists || d =="" { log.Fatal("MISSING DSN") }
	fmt.Println("> dsn", d)
	dsn = DSN{d} // or do struct literal that sets key and projectId as well
	SENTRY_URL = dsn.sentryUrl()
	fmt.Println("SENTRY_URL", SENTRY_URL)


// this assumed it's a single-digit project Id
projectId := rawurl[len(url)-1:]


// "Host" header provided via sdk in python/event.py but in python/proxy.py (Flask). "Host" not required by Sentry.io


4. `go get github.com/google/uuid github.com/mattn/go-sqlite3 github.com/joho/godotenv github.com/shopspring/decimal`